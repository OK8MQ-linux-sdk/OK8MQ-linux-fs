#!/bin/sh
export AR="aarch64-poky-linux-gcc-ar"
export AS="aarch64-poky-linux-as "
export BUILD_AR="ar"
export BUILD_AS="as "
export BUILD_CC="gcc "
export BUILD_CCLD="gcc "
export BUILD_CFLAGS="-isystemFIXMESTAGINGDIRHOST/usr/include -O2 -pipe"
export BUILD_CPP="gcc  -E"
export BUILD_CPPFLAGS="-isystemFIXMESTAGINGDIRHOST/usr/include"
export BUILD_CXX="g++ "
export BUILD_CXXFLAGS="-isystemFIXMESTAGINGDIRHOST/usr/include -O2 -pipe"
export BUILD_FC="gfortran "
export BUILD_LD="ld "
export BUILD_LDFLAGS="-LFIXMESTAGINGDIRHOST/usr/lib                         -LFIXMESTAGINGDIRHOST/lib                         -Wl,--enable-new-dtags                         -Wl,-rpath-link,FIXMESTAGINGDIRHOST/usr/lib                         -Wl,-rpath-link,FIXMESTAGINGDIRHOST/lib                         -Wl,-rpath,FIXMESTAGINGDIRHOST/usr/lib                         -Wl,-rpath,FIXMESTAGINGDIRHOST/lib                         -Wl,-O1"
export BUILD_NM="nm"
export BUILD_RANLIB="ranlib"
export BUILD_STRIP="strip"
export CC="aarch64-poky-linux-gcc  --sysroot=FIXMESTAGINGDIRTARGET"
export CCLD="aarch64-poky-linux-gcc  --sysroot=FIXMESTAGINGDIRTARGET"
export CFLAGS=" -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/lixinguo/workspace/imx-yocto-bsp-5.4.3/buildxwayland/tmp/work/aarch64-mx8m-poky-linux/weston/7.0.0.imx-r0=/usr/src/debug/weston/7.0.0.imx-r0                      -fdebug-prefix-map=/home/lixinguo/workspace/imx-yocto-bsp-5.4.3/buildxwayland/tmp/work/aarch64-mx8m-poky-linux/weston/7.0.0.imx-r0=/usr/src/debug/weston/7.0.0.imx-r0                      -fdebug-prefix-map=FIXMESTAGINGDIRTARGET=                      -fdebug-prefix-map=FIXMESTAGINGDIRHOST= "
export CPP="aarch64-poky-linux-gcc -E --sysroot=FIXMESTAGINGDIRTARGET "
export CPPFLAGS=""
export CXX="aarch64-poky-linux-g++  --sysroot=FIXMESTAGINGDIRTARGET"
export CXXFLAGS=" -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/lixinguo/workspace/imx-yocto-bsp-5.4.3/buildxwayland/tmp/work/aarch64-mx8m-poky-linux/weston/7.0.0.imx-r0=/usr/src/debug/weston/7.0.0.imx-r0                      -fdebug-prefix-map=/home/lixinguo/workspace/imx-yocto-bsp-5.4.3/buildxwayland/tmp/work/aarch64-mx8m-poky-linux/weston/7.0.0.imx-r0=/usr/src/debug/weston/7.0.0.imx-r0                      -fdebug-prefix-map=FIXMESTAGINGDIRTARGET=                      -fdebug-prefix-map=FIXMESTAGINGDIRHOST=  -fvisibility-inlines-hidden"
unset DISTRO
export FC="aarch64-poky-linux-gfortran  --sysroot=FIXMESTAGINGDIRTARGET"
export HOME="/home/lixinguo"
export LC_ALL="en_US.UTF-8"
export LD="aarch64-poky-linux-ld --sysroot=FIXMESTAGINGDIRTARGET "
export LDFLAGS="-Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed"
export LOGNAME="lixinguo"
unset MACHINE
export MAKE="make"
export NM="aarch64-poky-linux-nm"
export OBJCOPY="aarch64-poky-linux-objcopy"
export OBJDUMP="aarch64-poky-linux-objdump"
export PATH="FIXMESTAGINGDIRHOST/usr/bin/python3-native:/home/lixinguo/workspace/imx-yocto-bsp-5.4.3/sources/poky/scripts:FIXMESTAGINGDIRHOST/usr/bin/aarch64-poky-linux:FIXMESTAGINGDIRTARGET/usr/bin/crossscripts:FIXMESTAGINGDIRHOST/usr/sbin:FIXMESTAGINGDIRHOST/usr/bin:FIXMESTAGINGDIRHOST/sbin:FIXMESTAGINGDIRHOST/bin:/home/lixinguo/workspace/imx-yocto-bsp-5.4.3/sources/poky/bitbake/bin:FIXME_HOSTTOOLS_DIR"
export PKG_CONFIG_DIR="FIXMESTAGINGDIRTARGET/usr/lib/pkgconfig"
export PKG_CONFIG_DISABLE_UNINSTALLED="yes"
export PKG_CONFIG_LIBDIR="FIXMESTAGINGDIRTARGET/usr/lib/pkgconfig"
export PKG_CONFIG_PATH="FIXMESTAGINGDIRTARGET/usr/lib/pkgconfig:FIXMESTAGINGDIRTARGET/usr/share/pkgconfig"
export PKG_CONFIG_SYSROOT_DIR="FIXMESTAGINGDIRTARGET"
export PKG_CONFIG_SYSTEM_INCLUDE_PATH="/usr/include"
export PKG_CONFIG_SYSTEM_LIBRARY_PATH="/lib:/usr/lib"
export PSEUDO_DISABLED="1"
export PSEUDO_UNLOAD="1"
export PYTHON="FIXMESTAGINGDIRHOST/usr/bin/python3-native/python3"
export PYTHONNOUSERSITE="1"
export PYTHON_INCLUDE_DIR="FIXMESTAGINGDIRTARGET/usr/include/python3.7m"
export PYTHON_LIBRARY="FIXMESTAGINGDIRTARGET/usr/lib/libpython3.7m.so"
export RANLIB="aarch64-poky-linux-gcc-ranlib"
export READELF="aarch64-poky-linux-readelf"
unset SHELL
export STAGING_INCDIR="FIXMESTAGINGDIRTARGET/usr/include"
export STAGING_LIBDIR="FIXMESTAGINGDIRTARGET/usr/lib"
export STRINGS="aarch64-poky-linux-strings"
export STRIP="aarch64-poky-linux-strip"
unset TARGET_ARCH
export TERM="xterm"
export TZ="UTC"
export USER="lixinguo"
export _PYTHON_SYSCONFIGDATA_NAME="_sysconfigdata"
export base_bindir="/bin"
export base_libdir="/lib"
export base_prefix=""
export base_sbindir="/sbin"
export bindir="/usr/bin"
export datadir="/usr/share"
export docdir="/usr/share/doc"
export exec_prefix="/usr"
export includedir="/usr/include"
export infodir="/usr/share/info"
export libdir="/usr/lib"
export libexecdir="/usr/libexec"
export localstatedir="/var"
export mandir="/usr/share/man"
export nonarch_base_libdir="/lib"
export nonarch_libdir="/usr/lib"
export oldincludedir="/usr/include"
export prefix="/usr"
export sbindir="/usr/sbin"
export servicedir="/srv"
export sharedstatedir="/com"
export sysconfdir="/etc"
export systemd_system_unitdir="/lib/systemd/system"
export systemd_unitdir="/lib/systemd"
export systemd_user_unitdir="/usr/lib/systemd/user"

useradd_sysroot() {
	# Pseudo may (do_prepare_recipe_sysroot) or may not (do_populate_sysroot_setscene) be running
	# at this point so we're explicit about the environment so pseudo can load if
	# not already present.
	# PSEUDO_SYSROOT can contain references to the build architecture and COMPONENT_DIR
	# so needs the STAGING_FIXME below
	export PSEUDO="PSEUDO_PREFIX=FIXME_PSEUDO_SYSROOT/usr PSEUDO_LOCALSTATEDIR=FIXME_PSEUDO_LOCALSTATEDIR PSEUDO_PASSWD=FIXMESTAGINGDIRTARGET:FIXME_PSEUDO_SYSROOT PSEUDO_NOSYMLINKEXP=1 PSEUDO_DISABLED=0 FIXME_PSEUDO_SYSROOT/usr/bin/pseudo"

	# Explicitly set $D since it isn't set to anything
	# before do_prepare_recipe_sysroot
	D=FIXMESTAGINGDIRTARGET

	# base-passwd's postinst may not have run yet in which case we'll get called later, just exit.
	# Beware that in some cases we might see the fake pseudo passwd here, in which case we also must
	# exit.
	if [ ! -f $D/etc/passwd ] ||
			grep -q this-is-the-pseudo-passwd $D/etc/passwd; then
		exit 0
	fi

	# It is also possible we may be in a recipe which doesn't have useradd dependencies and hence the
	# useradd/groupadd tools are unavailable. If there is no dependency, we assume we don't want to
	# create users in the sysroot
	if ! command -v useradd; then
		bbwarn "command useradd not found!"
		exit 0
	fi

	# Add groups and users defined for all recipe packages
	GROUPADD_PARAM="--system weston-launch"
	USERADD_PARAM=""
	GROUPMEMS_PARAM=""

	# Tell the system to use the environment vars
	UA_SYSROOT=1

	useradd_preinst
}

useradd_preinst() {
OPT=""
SYSROOT=""

if test "x$D" != "x"; then
	# Installing into a sysroot
	SYSROOT="$D"
	OPT="--root $D"

	# Make sure login.defs is there, this is to make debian package backend work
	# correctly while doing rootfs.
	# The problem here is that if /etc/login.defs is treated as a config file for
	# shadow package, then while performing preinsts for packages that depend on
	# shadow, there might only be /etc/login.def.dpkg-new there in root filesystem.
	if [ ! -e $D/etc/login.defs -a -e $D/etc/login.defs.dpkg-new ]; then
	    cp $D/etc/login.defs.dpkg-new $D/etc/login.defs
	fi

	# user/group lookups should match useradd/groupadd --root
	export PSEUDO_PASSWD="$SYSROOT"
fi

# If we're not doing a special SSTATE/SYSROOT install
# then set the values, otherwise use the environment
if test "x$UA_SYSROOT" = "x"; then
	# Installing onto a target
	# Add groups and users defined only for this package
	GROUPADD_PARAM="${GROUPADD_PARAM}"
	USERADD_PARAM="${USERADD_PARAM}"
	GROUPMEMS_PARAM="${GROUPMEMS_PARAM}"
fi

# Perform group additions first, since user additions may depend
# on these groups existing
if test "x`echo $GROUPADD_PARAM | tr -d '[:space:]'`" != "x"; then
	echo "Running groupadd commands..."
	# Invoke multiple instances of groupadd for parameter lists
	# separated by ';'
	opts=`echo "$GROUPADD_PARAM" | cut -d ';' -f 1 | sed -e 's#[ \t]*$##'`
	remaining=`echo "$GROUPADD_PARAM" | cut -d ';' -f 2- | sed -e 's#[ \t]*$##'`
	while test "x$opts" != "x"; do
		perform_groupadd "$SYSROOT" "$OPT $opts"
		if test "x$opts" = "x$remaining"; then
			break
		fi
		opts=`echo "$remaining" | cut -d ';' -f 1 | sed -e 's#[ \t]*$##'`
		remaining=`echo "$remaining" | cut -d ';' -f 2- | sed -e 's#[ \t]*$##'`
	done
fi

if test "x`echo $USERADD_PARAM | tr -d '[:space:]'`" != "x"; then
	echo "Running useradd commands..."
	# Invoke multiple instances of useradd for parameter lists
	# separated by ';'
	opts=`echo "$USERADD_PARAM" | cut -d ';' -f 1 | sed -e 's#[ \t]*$##'`
	remaining=`echo "$USERADD_PARAM" | cut -d ';' -f 2- | sed -e 's#[ \t]*$##'`
	while test "x$opts" != "x"; do
		perform_useradd "$SYSROOT" "$OPT $opts"
		if test "x$opts" = "x$remaining"; then
			break
		fi
		opts=`echo "$remaining" | cut -d ';' -f 1 | sed -e 's#[ \t]*$##'`
		remaining=`echo "$remaining" | cut -d ';' -f 2- | sed -e 's#[ \t]*$##'`
	done
fi

if test "x`echo $GROUPMEMS_PARAM | tr -d '[:space:]'`" != "x"; then
	echo "Running groupmems commands..."
	# Invoke multiple instances of groupmems for parameter lists
	# separated by ';'
	opts=`echo "$GROUPMEMS_PARAM" | cut -d ';' -f 1 | sed -e 's#[ \t]*$##'`
	remaining=`echo "$GROUPMEMS_PARAM" | cut -d ';' -f 2- | sed -e 's#[ \t]*$##'`
	while test "x$opts" != "x"; do
		perform_groupmems "$SYSROOT" "$OPT $opts"
		if test "x$opts" = "x$remaining"; then
			break
		fi
		opts=`echo "$remaining" | cut -d ';' -f 1 | sed -e 's#[ \t]*$##'`
		remaining=`echo "$remaining" | cut -d ';' -f 2- | sed -e 's#[ \t]*$##'`
	done
fi
}

bbwarn() {
	if [ -p FIXME_LOGFIFO ] ; then
		printf "%b\0" "bbwarn $*" > FIXME_LOGFIFO
	else
		echo "WARNING: $*"
	fi
}

perform_useradd() {
	local rootdir="$1"
	local opts="$2"
	bbnote "weston: Performing useradd with [$opts]"
	local username=`echo "$opts" | awk '{ print $NF }'`
	local user_exists="`grep "^$username:" $rootdir/etc/passwd || true`"
	if test "x$user_exists" = "x"; then
		eval flock -x $rootdir/etc -c  \"$PSEUDO useradd \$opts\" || true
		user_exists="`grep "^$username:" $rootdir/etc/passwd || true`"
		if test "x$user_exists" = "x"; then
			bbfatal "weston: useradd command did not succeed."
		fi
	else
		bbnote "weston: user $username already exists, not re-creating it"
	fi
}

perform_groupmems() {
	local rootdir="$1"
	local opts="$2"
	bbnote "weston: Performing groupmems with [$opts]"
	local groupname=`echo "$opts" | awk '{ for (i = 1; i < NF; i++) if ($i == "-g" || $i == "--group") print $(i+1) }'`
	local username=`echo "$opts" | awk '{ for (i = 1; i < NF; i++) if ($i == "-a" || $i == "--add") print $(i+1) }'`
	bbnote "weston: Running groupmems command with group $groupname and user $username"
	local mem_exists="`grep "^$groupname:[^:]*:[^:]*:\([^,]*,\)*$username\(,[^,]*\)*$" $rootdir/etc/group || true`"
	if test "x$mem_exists" = "x"; then
		eval flock -x $rootdir/etc -c \"$PSEUDO groupmems \$opts\" || true
		mem_exists="`grep "^$groupname:[^:]*:[^:]*:\([^,]*,\)*$username\(,[^,]*\)*$" $rootdir/etc/group || true`"
		if test "x$mem_exists" = "x"; then
			bbfatal "weston: groupmems command did not succeed."
		fi
	else
		bbnote "weston: group $groupname already contains $username, not re-adding it"
	fi
}

perform_groupadd() {
	local rootdir="$1"
	local opts="$2"
	bbnote "weston: Performing groupadd with [$opts]"
	local groupname=`echo "$opts" | awk '{ print $NF }'`
	local group_exists="`grep "^$groupname:" $rootdir/etc/group || true`"
	if test "x$group_exists" = "x"; then
		eval flock -x $rootdir/etc -c \"$PSEUDO groupadd \$opts\" || true
		group_exists="`grep "^$groupname:" $rootdir/etc/group || true`"
		if test "x$group_exists" = "x"; then
			bbfatal "weston: groupadd command did not succeed."
		fi
	else
		bbnote "weston: group $groupname already exists, not re-creating it"
	fi
}

bbfatal() {
	if [ -p FIXME_LOGFIFO ] ; then
		printf "%b\0" "bbfatal $*" > FIXME_LOGFIFO
	else
		echo "ERROR: $*"
	fi
	exit 1
}

bbnote() {
	if [ -p FIXME_LOGFIFO ] ; then
		printf "%b\0" "bbnote $*" > FIXME_LOGFIFO
	else
		echo "NOTE: $*"
	fi
}

useradd_sysroot
